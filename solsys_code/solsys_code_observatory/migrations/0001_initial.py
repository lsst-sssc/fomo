# Generated by Django 4.2.19 on 2025-06-03 05:12

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):  # noqa: D101
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Observatory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'obscode',
                    models.CharField(default=None, max_length=4, unique=True, verbose_name='MPC observatory code'),
                ),
                (
                    'name',
                    models.CharField(default=None, max_length=255, unique=True, verbose_name='Name of the observatory'),
                ),
                ('short_name', models.CharField(max_length=255, verbose_name='Short version of observatory name')),
                (
                    'lon',
                    models.FloatField(
                        db_index=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                -180.0, message='longitude must be greater than -180.'
                            ),
                            django.core.validators.MaxValueValidator(180.0, message='longitude must be less than 180.'),
                        ],
                        verbose_name='Longitude (East is positive) [deg]',
                    ),
                ),
                (
                    'lat',
                    models.FloatField(
                        db_index=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                -180.0, message='latitude must be greater than -90.'
                            ),
                            django.core.validators.MaxValueValidator(180.0, message='latitude must be less than 90.'),
                        ],
                        verbose_name='Latitude (North is positive) [deg]',
                    ),
                ),
                ('altitude', models.FloatField(default=0.0, null=True, verbose_name='Altitude [m]')),
                (
                    'observations_type',
                    models.SmallIntegerField(
                        choices=[(0, 'Optical'), (1, 'Occultation'), (2, 'Satellite'), (4, 'Radar')],
                        default=0,
                        verbose_name='Observations Type',
                    ),
                ),
                (
                    'uses_two_line_obs',
                    models.BooleanField(
                        default=False,
                        verbose_name='Whether this observatory uses two-line observations e.g. satellite/radar',
                    ),
                ),
                ('old_names', models.TextField(verbose_name='Any previous names used by the observatory')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
    ]
